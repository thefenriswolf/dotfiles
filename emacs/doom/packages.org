#+title: Stefan's DOOM EMACS PACKAGES
#+author: Stefan Rohrbacher
#+startup: showeverything
#+property: header-args :tangle packages.el
#+auto_tangle: t
* INTRO

To install a package with Doom you must declare them here and run ~doom sync~
on the command line, then restart Emacs for the changes to take effect -- or
use ~M-x doom/reload~.

To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! some-package)
#+end_src
** ADDITIONAL INFO
#+begin_src emacs-lisp :tangle no
(package! process)
          :recipe (:host github :repo "haji-ali/procress")
#+end_src

To install a package directly from a remote git repo, you must specify a
 `:recipe'. You'll find documentation on what `:recipe' accepts here:
 https://github.com/radian-software/straight.el#the-recipe-format

#+begin_src emacs-lisp :tangle no
(package! another-package
  :recipe (:host github :repo "username/repo"))
#+end_src

If the package you are trying to install does not contain a PACKAGENAME.el
file, or is located in a subdirectory of the repo, you'll need to specify
 `:files' in the `:recipe':
#+begin_src emacs-lisp :tangle no
(package! this-package
  :recipe (:host github :repo "username/repo"
           :files ("some-file.el" "src/lisp/*.el")))
#+end_src

If you'd like to disable a package included with Doom, you can do so here
with the `:disable' property:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :disable t)
#+end_src

You can override the recipe of a built in package without having to specify
all the properties for `:recipe'. These will inherit the rest of its recipe
from Doom or MELPA/ELPA/Emacsmirror:
#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:nonrecursive t))
(package! builtin-package-2 :recipe (:repo "myfork/package"))
#+end_src

Specify a `:branch' to install a package from a particular branch or tag.
This is required for some packages whose default branch isn't 'master' (which
our package manager can't deal with; see radian-software/straight.el#279)

#+begin_src emacs-lisp :tangle no
(package! builtin-package :recipe (:branch "develop"))
#+end_src

Use `:pin' to specify a particular commit to install.
#+begin_src emacs-lisp :tangle no
(package! builtin-package :pin "1a2b3c4d5e")
#+end_src

Doom's packages are pinned to a specific commit and updated from release to
release. The `unpin!' macro allows you to unpin single packages...
#+begin_src emacs-lisp :tangle no
(unpin! pinned-package)
#+end_src

...or multiple packages
 #+begin_src emacs-lisp :tangle no
(unpin! pinned-package another-pinned-package)
#+end_src

...Or *all* packages (NOT RECOMMENDED; will likely break things)
#+begin_src emacs-lisp :tangle no
(unpin! t)
#+end_src


* Header
#+begin_src emacs-lisp
;;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

* Auto tangle
org babel auto tangle automatically tangles source code blocks on file save.
add ~#+auto_tangle: nil~ to disable or ~#+auto_tangle: t~ to enable this behavior.
#+begin_src emacs-lisp
(package! org-auto-tangle)
#+end_src

* ORG TOC
Generates a GitHub compatible TOC in org files.
Run: ~org-make-toc-insert~ to initialize the TOC and ~org-make-toc~ to refresh.
TOC must be the first thing after a heading, there can be no text before it!
#+begin_src emacs-lisp
(package! org-make-toc)
#+end_src

* BEACON
Adds a beacon to the cursor which flashes when focus or cursor position change.
#+begin_src emacs-lisp
(package! beacon)
#+end_src

* CHEZMOI
Dotfile manager
#+begin_src emacs-lisp
;;(package! chezmoi)
#+end_src
